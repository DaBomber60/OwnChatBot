#!/usr/bin/env bash
set -euo pipefail

echo "==> OwnChatBot Quickstart (Bash)"

COMPOSE_FILE_URL="https://raw.githubusercontent.com/dabomber60/ownchatbot/main/docker-compose.simple.yml"

# Detect openssl for password generation
gen_password() {
  if command -v openssl >/dev/null 2>&1; then
    openssl rand -hex 16
  else
    # Fallback: /dev/urandom
    head -c 16 /dev/urandom | od -An -tx1 | tr -d ' \n'
  fi
}

# If docker not installed
if ! command -v docker >/dev/null 2>&1; then
  echo "ERROR: Docker is required. Install Docker Desktop or the Docker Engine." >&2
  exit 1
fi

# Compose v2 check
if docker compose version >/dev/null 2>&1; then
  DOCKER_COMPOSE="docker compose"
elif command -v docker-compose >/dev/null 2>&1; then
  DOCKER_COMPOSE="docker-compose" # legacy
else
  echo "ERROR: Docker Compose (v2) not found." >&2
  exit 1
fi

if [ ! -f docker-compose.simple.yml ] && [ ! -f docker-compose.yml ]; then
  echo "Downloading minimal docker-compose file..."
  curl -fsSL "$COMPOSE_FILE_URL" -o docker-compose.yml
  COMPOSE_FILE="docker-compose.yml"
else
  # Prefer existing explicit name
  if [ -f docker-compose.yml ]; then
    COMPOSE_FILE="docker-compose.yml"
  else
    COMPOSE_FILE="docker-compose.simple.yml"
  fi
fi

echo "Using compose file: $COMPOSE_FILE"

# Optional .env bootstrap (idempotent)
if [ ! -f .env ]; then
  echo "Creating .env (you can edit this later)..."
  POSTGRES_PASSWORD_VALUE="$(gen_password)"
  cat > .env <<EOF
# Generated by quickstart.sh
POSTGRES_DB=ownchatbot
POSTGRES_USER=ownchatbot
POSTGRES_PASSWORD=${POSTGRES_PASSWORD_VALUE}
# Uncomment to expose on a different host port
# APP_PORT=3000
# Supply a fixed JWT secret (otherwise app persists one automatically)
# JWT_SECRET=
EOF
  echo "Stored random POSTGRES_PASSWORD in .env"
else
  echo ".env already present (not modifying)"
fi

export APP_IMAGE="dabomber/ownchatbot:latest"
# Allow override but default a clean predictable compose project name
export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME:-ownchatbot}"

echo "Starting containers (project: $COMPOSE_PROJECT_NAME)..."
$DOCKER_COMPOSE -f "$COMPOSE_FILE" up -d

echo "Waiting for app to become healthy (HTTP 200 /api/health)..."
ATTEMPTS=60
while [ $ATTEMPTS -gt 0 ]; do
  if curl -fsS http://localhost:${APP_PORT:-3000}/api/health >/dev/null 2>&1; then
    echo "Application is healthy!"
    break
  fi
  sleep 2
  ATTEMPTS=$((ATTEMPTS-1))
done

if [ $ATTEMPTS -le 0 ]; then
  echo "WARN: Timed out waiting for health endpoint. You can still check logs." >&2
fi

echo "\nOpen: http://localhost:${APP_PORT:-3000}"
echo "To view logs: $DOCKER_COMPOSE logs -f"
echo "To stop:      $DOCKER_COMPOSE down"
echo "Volumes persist data (omit --volumes unless you intend to reset)."
