<#!
.SYNOPSIS
  PowerShell quickstart script for OwnChatBot.
#>
Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

Write-Host '==> OwnChatBot Quickstart (PowerShell)' -ForegroundColor Cyan

$composeFileUrl = 'https://raw.githubusercontent.com/dabomber60/ownchatbot/main/docker-compose.simple.yml'

if (-not (Get-Command docker -ErrorAction SilentlyContinue)) {
  Write-Error 'Docker is required. Install Docker Desktop first.'
}

$composeCmd = if ((docker compose version) 2>$null) { 'docker compose' } elseif (Get-Command docker-compose -ErrorAction SilentlyContinue) { 'docker-compose' } else { throw 'Docker Compose not found.' }

if (-not (Test-Path 'docker-compose.simple.yml') -and -not (Test-Path 'docker-compose.yml')) {
  Write-Host 'Downloading minimal docker-compose file...'
  Invoke-WebRequest $composeFileUrl -OutFile 'docker-compose.yml'
  $composeFile = 'docker-compose.yml'
} else {
  if (Test-Path 'docker-compose.yml') { $composeFile = 'docker-compose.yml' } else { $composeFile = 'docker-compose.simple.yml' }
}

Write-Host "Using compose file: $composeFile"

if (-not (Test-Path '.env')) {
  Write-Host 'Creating .env (edit as needed)...'
  $bytes = New-Object byte[] 16; (New-Object System.Security.Cryptography.RNGCryptoServiceProvider).GetBytes($bytes)
  $pgPass = ($bytes | ForEach-Object { $_.ToString('x2') }) -join ''
  @"
# Generated by quickstart.ps1
POSTGRES_DB=ownchatbot
POSTGRES_USER=ownchatbot
POSTGRES_PASSWORD=$pgPass
COMPOSE_PROJECT_NAME=ownchatbot
APP_IMAGE=dabomber/ownchatbot:latest
# APP_PORT=3000
# JWT_SECRET=
"@ | Out-File -Encoding utf8 .env
  Write-Host 'Stored random POSTGRES_PASSWORD in .env'
} else {
  Write-Host '.env already present (not modifying base values)'
  # Ensure COMPOSE_PROJECT_NAME and APP_IMAGE exported if present in file
  (Get-Content .env | ForEach-Object { $_ }) | ForEach-Object {
    if ($_ -match '^(COMPOSE_PROJECT_NAME)=(.*)$') { $Env:COMPOSE_PROJECT_NAME = $Matches[2] }
    if ($_ -match '^(APP_IMAGE)=(.*)$') { $Env:APP_IMAGE = $Matches[2] }
    if ($_ -match '^(APP_PORT)=(.*)$') { $Env:APP_PORT = $Matches[2] }
  }
}

if (-not $Env:APP_IMAGE) { $Env:APP_IMAGE = 'dabomber/ownchatbot:latest' }
if (-not $Env:COMPOSE_PROJECT_NAME) { $Env:COMPOSE_PROJECT_NAME = 'ownchatbot' }

Write-Host "Starting containers (project: $($Env:COMPOSE_PROJECT_NAME))..."
& $composeCmd -f $composeFile up -d | Write-Host

Write-Host 'Waiting for app health...' -NoNewline
$attempts = 60
$port = if ($Env:APP_PORT) { $Env:APP_PORT } else { 3000 }
while ($attempts -gt 0) {
  try {
    $resp = Invoke-WebRequest -Uri "http://localhost:$port/api/health" -UseBasicParsing -TimeoutSec 3
    if ($resp.StatusCode -eq 200) { Write-Host ' OK'; break }
  } catch {}
  Start-Sleep -Seconds 2
  $attempts--
  Write-Host '.' -NoNewline
}
if ($attempts -le 0) { Write-Host "\nWARN: Timed out waiting for health endpoint." -ForegroundColor Yellow }

Write-Host "`nOpen: http://localhost:$port" -ForegroundColor Green
Write-Host "Logs: $composeCmd logs -f"
Write-Host "Stop: $composeCmd down"
Write-Host 'Data persists in named volumes.'
